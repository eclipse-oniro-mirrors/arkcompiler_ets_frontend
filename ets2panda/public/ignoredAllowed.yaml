# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


ignored_list:

  # Which constructors should not be generated
  constructors:

    # For classes listed below constructors will not be generated
    call_class:
      - name: AstNode
      - name: ClassElement
      - name: TypedStatement
      - name: Annotated
      - name: Scope
      - name: Type
      - name: ObjectType
      - name: VarBinder
      - name: ETSBinder
      - name: BoundContext
        namespace: varbinder
      - name: Checker
      - name: ETSChecker
      - name: ETSParser


  # Which methods should not be generated
  methods:

    # For classes listed below methods will not be generated
    call_class:
      - name: Annotated
      - name: Checker
      - name: ETSChecker
      - name: VarBinder
      - name: ETSBinder

    # Method will not be generated if its name starts with any element listed below
    name_starts_with:
      - HasFloatingPoint
      - AddChildLambda
      - 'operator='
      - NumericConditionalCheck
      - CompileComputed
      - Result
      - GetConstOriginalBaseType
      - GetOwnProperty
      - AddProperty
      - RemoveProperty
      - ReduceSubtypes
      - CheckIdenticalVariable
      - CreatePropertyMap
      - AddSpecifiersToTopBindings
      - CheckForRedeclarationError
      - CheckExpressionsInConstructor
      - PerformArithmeticOperationOnTypes
      - PerformRelationOperationOnTypes
      - BindingsModuleObjectAddProperty
      - MakePropertyNonNullish
      - GetProxyMethodBody
      - GetFlagsForProxyLambda
      - ComputeProxyMethods
      - CheckValidUnionEqual
      - TestUnionType
      - IsValidSetterLeftSide
      - CreateProxyFunc
      - ApplyModifiersAndRemoveImplementedAbstracts
      - ValidateAbstractSignature
      - ValidateNonOverriddenFunction
      - InvalidateType
      - TypeError

    # Method will not be generated if return type is one of the following
    return_type:
      - name: Checker
      - name: ETSChecker
      - name: ArenaAllocator
      - name: Allocator
      - name: Program
      - name: Tag
      - name: ConstraintCheckRecord
      - name: Number
        namespace: lexer
      - name: Property
        namespace: AstDumper
      - name: TSChecker
        namespace: checker
      - name: stringstream
      - name: Holder
      - name: tuple
      - name: UnaryPredicate
        namespace: checker
      - name: VarBinder
      - name: ModulesToExportedNamesWithAliases
        namespace: varbinder
      - name: T
      - name: K
      - name: ModuleEntry
        namespace: varbinder
      - name: ETSBinder
      - name: Context
        namespace: public_lib
      - name: VariableType
        namespace: varbinder
      - name: Args
        namespace: varbinder
      - name: InsertResult
        namespace: varbinder
      - name: RelationHolder
        namespace: checker
      - name: auto
      - name: recursive_mutex
      - name: SmartCastArray
      - name: SmartCastTypes
      - name: SemanticAnalyzer
      - name: optional
        namespace: std
      - name: WrapperDesc
      - name: Language
      - name: ScopedDebugInfoPlugin
      - name: Args
        namespace: parser
      - name: ETSParser
      - name: ScriptExtension
      - name: function
        namespace: std
      - name: Result
        namespace: 'compiler::ast_verifier::'


  # Method and constructors will not be generated if c++ postfix contains any element listed below
  postfix_contains:
  - '= delete'
  - override

  # Methods and constructors with arguments listed below will not be generated
  args:
  - type:
      name: Tag
  - type:
      name: Number
      namespace: lexer
  - type:
      name: Property
      namespace: AstDumper
  - type:
      name: TSChecker
      namespace: checker
  - type:
      name: ArenaVector
      template_args:
        - type:
            name: pair
  - type:
      name: initializer_list
  - type:
      name: stringstream
  - type:
      name: Holder
  - type:
      name: tuple
  - type:
      name: UnaryPredicate
      namespace: checker
  - type:
      name: ScopedDebugInfoPlugin
  - type:
      name: ModulesToExportedNamesWithAliases
      namespace: varbinder
  - type:
      name: ModuleEntry
      namespace: varbinder
  - type:
      name: Args
  - type:
      name: VariableType
      namespace: varbinder
  - type:
      name: Span
  - type:
      name: recursive_mutex
  - type:
      name: InsertResult
      namespace: varbinder
  - type:
      name: auto
  - type:
      name: SmartCastArray
  - type:
      name: SmartCastTypes
  - type:
      name: ConstraintCheckRecord
  - type:
      name: WrapperDesc
  - type:
      name: optional
      namespace: std
  - type:
      name: RelationHolder
      namespace: checker
  - type:
      name: T
  - type:
      name: K
  - name: '[N]'

  # TODO(zhelyapovaleksey): refactor template filtering, because template can be named by any name (Issue #21565)
  # Methods and constructors which contains arguments with templates listed below will not be generated
  template_types:
  - name: Checker
  - name: ETSChecker
  - name: Program
  - name: stringstream
  - name: TSChecker
    namespace: checker
  - name: T
  - name: K
  - name: ModuleEntry
    namespace: varbinder
  - name: Args
  - name: ETSBinder
  - name: InsertResult
    namespace: varbinder
  - name: pair
  - name: RelationHolder
    namespace: checker
  - name: recursive_mutex
  - name: tuple
  - name: SmartCastArray
  - name: SmartCastTypes
  - name: ConstraintCheckRecord
  - name: optional
    namespace: std
  - name: ArenaVector
  - name: WrapperDesc
  - name: ScopedDebugInfoPlugin


# Despite the ignored_list section, the following will be generated
# Format: [{<class_name>: [<method_name_1, method_name_2, ...]>}, ...]
allowed_list:
  ETSBinder:
    - ResolveReferenceForScope
    - ResolveReferencesForScope
    - ResolveReferencesForScopeWithContext
