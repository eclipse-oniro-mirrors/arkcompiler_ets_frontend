{
    "copyright": [
        "Copyright (c) 2025 Huawei Device Co., Ltd.",
        "Licensed under the Apache License, Version 2.0 (the 'License');",
        "you may not use this file except in compliance with the License.",
        "You may obtain a copy of the License at",
        "",
        "http://www.apache.org/licenses/LICENSE-2.0",
        "",
        "Unless required by applicable law or agreed to in writing, software",
        "distributed under the License is distributed on an 'AS IS' BASIS,",
        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
        "See the License for the specific language governing permissions and",
        "limitations under the License."
    ],
    "result": [
        {
            "line": 15,
            "column": 10,
            "endLine": 15,
            "endColumn": 21,
            "problem": "LimitedStdLibNoImportConcurrency",
            "suggest": "",
            "rule": "Import Concurrency is not required (arkts-limited-stdlib-no-import-concurrency)",
            "severity": "ERROR"
        },
        {
            "line": 19,
            "column": 5,
            "endLine": 19,
            "endColumn": 43,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 19,
            "column": 17,
            "endLine": 19,
            "endColumn": 34,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 20,
            "column": 5,
            "endLine": 20,
            "endColumn": 44,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 20,
            "column": 18,
            "endLine": 20,
            "endColumn": 35,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 21,
            "column": 5,
            "endLine": 21,
            "endColumn": 44,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 21,
            "column": 18,
            "endLine": 21,
            "endColumn": 35,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 22,
            "column": 5,
            "endLine": 22,
            "endColumn": 47,
            "problem": "AnyType",
            "suggest": "",
            "rule": "Use explicit types instead of \"any\", \"unknown\" (arkts-no-any-unknown)",
            "severity": "ERROR"
        },
        {
            "line": 23,
            "column": 43,
            "endLine": 23,
            "endColumn": 60,
            "problem": "DynamicCtorCall",
            "suggest": "",
            "rule": "\"new\" expression with dynamic constructor type is not supported (arkts-no-dynamic-ctor-call)",
            "severity": "ERROR"
        },
        {
            "line": 33,
            "column": 9,
            "endLine": 33,
            "endColumn": 12,
            "problem": "BuiltinNarrowTypes",
            "suggest": "",
            "rule": "Using narrowing of types is not allowed in this API (arkts-builtin-narrow-types)",
            "severity": "ERROR"
        },
        {
            "line": 37,
            "column": 9,
            "endLine": 37,
            "endColumn": 27,
            "problem": "CreatingPrimitiveTypes",
            "suggest": "",
            "rule": "Primitive types are normalized with their boxed type (arkts-primitive-type-normalization)",
            "severity": "ERROR"
        },
        {
            "line": 38,
            "column": 9,
            "endLine": 38,
            "endColumn": 22,
            "problem": "CreatingPrimitiveTypes",
            "suggest": "",
            "rule": "Primitive types are normalized with their boxed type (arkts-primitive-type-normalization)",
            "severity": "ERROR"
        },
        {
            "line": 39,
            "column": 9,
            "endLine": 39,
            "endColumn": 23,
            "problem": "CreatingPrimitiveTypes",
            "suggest": "",
            "rule": "Primitive types are normalized with their boxed type (arkts-primitive-type-normalization)",
            "severity": "ERROR"
        },
        {
            "line": 40,
            "column": 9,
            "endLine": 40,
            "endColumn": 21,
            "problem": "CreatingPrimitiveTypes",
            "suggest": "",
            "rule": "Primitive types are normalized with their boxed type (arkts-primitive-type-normalization)",
            "severity": "ERROR"
        },
        {
            "line": 44,
            "column": 19,
            "endLine": 44,
            "endColumn": 30,
            "problem": "GenericCallNoTypeArgs",
            "suggest": "",
            "rule": "Type inference in case of generic function calls is limited (arkts-no-inferred-generic-params)",
            "severity": "ERROR"
        }
    ]
}